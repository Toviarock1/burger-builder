{"version":3,"sources":["containers/Auth/Auth.js","components/UI/Button/Button.jsx","components/UI/Button/Button.module.css","components/UI/Input/Input.jsx","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css"],"names":["Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","invalid","shouldValidate","changed","loading","errorMessage","error","message","className","classes","onSubmit","btnType","clicked","Component","connect","auth","isAuthenticated","token","burgerBuilder","building","dispatch","actions","button","Button","join","disabled","onClick","children","module","exports","input","inputElement","validationError","inputClasses","InputElement","ValidationError","Invalid","onChange","options","option","displayValue","Input","Label","label"],"mappings":"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","file":"static/js/5.3556037c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/actions/index';\nimport { updateObject, checkValidity } from '../../shared/utility';\n\nclass Auth extends Component {\n    state = {\n        controls: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Mail Address'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6\n                },\n                valid: false,\n                touched: false\n            }\n        },\n        isSignup: true\n    }\n\n    componentDidMount() {\n        if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\n            this.props.onSetAuthRedirectPath();\n        }\n    }\n\n    inputChangedHandler = ( event, controlName ) => {\n        const updatedControls = updateObject(this.state.controls,{\n            [controlName]: updateObject(this.state.controls[controlName],{\n            value: event.target.value,\n                valid: checkValidity( event.target.value, this.state.controls[controlName].validation ),\n                touched: true\n            })\n        });\n        this.setState( { controls: updatedControls } );\n    }\n\n    submitHandler = ( event ) => {\n        event.preventDefault();\n        this.props.onAuth( this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup );\n    }\n\n    switchAuthModeHandler = () => {\n        this.setState(prevState => {\n            return {isSignup: !prevState.isSignup};\n        });\n    }\n\n    render () {\n        const formElementsArray = [];\n        for ( let key in this.state.controls ) {\n            formElementsArray.push( {\n                id: key,\n                config: this.state.controls[key]\n            } );\n        }\n\n        let form = formElementsArray.map( formElement => (\n            <Input\n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                changed={( event ) => this.inputChangedHandler( event, formElement.id )} />\n        ) );\n\n        if (this.props.loading) {\n            form = <Spinner />\n        }\n\n        let errorMessage = null;\n\n        if (this.props.error) {\n            errorMessage = (\n                <p>{this.props.error.message}</p>\n            );\n        }\n\n        return (\n            <div className={classes.Auth}>\n                {errorMessage}\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <Button btnType=\"Success\">SUBMIT</Button>\n                </form>\n                <Button \n                    clicked={this.switchAuthModeHandler}\n                    btnType=\"Danger\">SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'}</Button>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticated: state.auth.token !== null,\n        buildingBurger: state.burgerBuilder.building,\n        authRedirectPath: state.auth.authRedirectPath\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: ( email, password, isSignup ) => dispatch( actions.auth( email, password, isSignup ) ),\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n    };\n};\n\nexport default connect( mapStateToProps, mapDispatchToProps )( Auth );","import React from 'react';\nimport classes from './Button.module.css';\n\nconst button = (props) => (\n\t<button\n\t\tclassName={[classes.Button, classes[props.btnType]].join(' ')}\n\t\tdisabled={props.disabled}\n\t\tonClick={props.clicked}>\n\t\t\t{props.children}\n\t</button>\n);\n\nexport default button;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__3gFiX\",\"Success\":\"Button_Success__2Rka1\",\"Danger\":\"Button_Danger__2ogZq\"};","import React from 'react';\n\nimport classes from './Input.module.css';\n\nconst input = (props) => {\n\tlet inputElement = null;\n\tlet validationError = null;\n\tconst inputClasses = [classes.InputElement];\n\n\tif(props.invalid && props.touched) {\n\t\tvalidationError = (<p className={classes.ValidationError} >Please enter a valid value</p>);\n\t}\n\n\tif(props.invalid && props.shouldValidate && props.touched) {\n\t\tinputClasses.push(classes.Invalid);\n\t}\n\n\tswitch (props.elementType){\n\t\tcase ('input'):\n\t\t\tinputElement = <input className={inputClasses.join(' ')}\n\t\t\tonChange={props.changed} {...props.elementConfig} value={props.value} />;\n\t\t\tbreak;\n\t\tcase ('textarea'):\n\t\t\tinputElement = <textarea className={inputClasses.join(' ')}\n\t\t\tonChange={props.changed} {...props.elementConfig} value={props.value} />;\n\t\t\tbreak;\n\t\tcase ('select'):\n\t\t\tinputElement = (<select\tclassName={inputClasses.join(' ')}\n\t\t\tonChange={props.changed} \n\t\t\tvalue={props.value} >\n\t\t\t\t{props.elementConfig.options.map(option => (\n\t\t\t\t\t<option key={option.value} value={option.value}>\n\t\t\t\t\t\t{option.displayValue}\n\t\t\t\t\t</option>\n\t\t\t\t)\n\t\t\t\t)}\n\t\t\t</select>);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tinputElement = <input className={inputClasses.join(' ')}\n\t\t\tonChange={props.changed} {...props.elementConfig} value={props.value} />;\n\t}\n\n\treturn (\n\t\t<div className={classes.Input} >\n\t\t\t<label className={classes.Label} >{props.label}</label>\n\t\t\t{inputElement}\n\t\t\t{validationError}\n\t\t</div>\n\t);\n};\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\",\"ValidationError\":\"Input_ValidationError__qMR97\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1Zul_\"};"],"sourceRoot":""}