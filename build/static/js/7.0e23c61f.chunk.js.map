{"version":3,"sources":["containers/Orders/Orders.jsx"],"names":["connect","state","orders","order","loading","token","auth","userId","dispatch","onFetchOrders","actions","withErrorHandler","props","useEffect","map","ingredients","price","id","axios"],"mappings":"wHAAA,wEAgDeA,uBAfS,SAAAC,GACpB,MAAO,CACHC,OAAQD,EAAME,MAAMD,OACpBE,QAASH,EAAME,MAAMC,QACrBC,MAAOJ,EAAMK,KAAKD,MAClBE,OAAQN,EAAMK,KAAKC,WAIA,SAAAC,GACvB,MAAO,CACHC,cAAe,SAACJ,EAAOE,GAAR,OAAmBC,EAASE,IAAoBL,EAAOE,QAI/DP,CAA6CW,aAtC7C,SAACC,GACZ,IAAQP,EAAiCO,EAAjCP,MAAOE,EAA0BK,EAA1BL,OAAQE,EAAkBG,EAAlBH,cACvBI,qBAAU,WACNJ,EAAcJ,EAAOE,KACtB,CAACF,EAAOE,EAAQE,IAEnB,IAAIP,EAAS,cAAC,IAAD,IAUb,OATKU,EAAMR,UACPF,EAASU,EAAMV,OAAOY,KAAI,SAAAX,GAAK,OAE3B,cAAC,IAAD,CACIY,YAAaZ,EAAMY,YACnBC,OAAQb,EAAMa,OAFNb,EAAMc,QAOtB,8BACKf,MAoBwEgB","file":"static/js/7.0e23c61f.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport axios from '../../axios-orders';\nimport Order from '../../components/Order/Order';\nimport withErrorHandler from '../../hoc/WithErrorHandler/WithErrorHandler';\nimport * as actions from '../../store/actions/index';\nimport Spinner from '../../components/UI/Spinner/Spinner';\n\n\nconst Orders = (props) => {\n    const { token, userId, onFetchOrders } = props;\n    useEffect(() => {\n        onFetchOrders(token, userId);\n    }, [token, userId, onFetchOrders])\n\n    let orders = <Spinner />;\n    if (!props.loading) {\n        orders = props.orders.map(order =>\n        (\n            <Order key={order.id}\n                ingredients={order.ingredients}\n                price={+order.price}\n            />\n        ))\n    }\n    return (\n        <div>\n            {orders}\n        </div>\n    );\n}\n\nconst mapStateToProps = state => {\n    return {\n        orders: state.order.orders,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onFetchOrders: (token, userId) => dispatch(actions.fetchOrders(token, userId))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders, axios));"],"sourceRoot":""}